// -------------------------------------------------------------------------
// PRISMA CONFIGURATION
// -------------------------------------------------------------------------
generator appClient {
    provider = "prisma-client-js"
    output   = "./generated/app-client"
}

datasource appDatabase {
    provider = "postgresql"
    url      = env("PG_APP_URL")
}

// -------------------------------------------------------------------------
// ENUMERATIONS
// -------------------------------------------------------------------------

// User Roles for Access Control
// Defines the level of access and permissions for users
enum UserRole {
    ADMIN // User with full administrative access to the system
    MODERATOR // User with elevated permissions for moderation tasks
    USER // Regular user with standard permissions
}

// Status options for user accounts
// Controls authentication capabilities and visibility
enum UserStatus {
    ACTIVE // Normal functioning account
    INACTIVE // Account temporarily deactivated by user
    SUSPENDED // Account temporarily deactivated by admin
    DELETED // Account permanently deactivated
}

// Status options for follow requests to private accounts
enum FollowRequestStatus {
    PENDING // Request sent but not yet reviewed
    ACCEPTED // Request approved by account owner
    REJECTED // Request denied by account owner
}

// List of supported timezones for user location settings, including both 
// named time zones and UTC offsets with half-hour intervals for precision.

enum Timezone {
    // Named Timezones
    // These are standard time zones with their UTC offsets
    UTC // Coordinated Universal Time (UTC+0)
    GMT // Greenwich Mean Time (UTC+0)
    PST // Pacific Standard Time (UTC-8)
    EST // Eastern Standard Time (UTC-5)
    CST // Central Standard Time (UTC-6)
    MST // Mountain Standard Time (UTC-7)
    IST // Indian Standard Time (UTC+5:30)
    CET // Central European Time (UTC+1)
    EET // Eastern European Time (UTC+2)
    JST // Japan Standard Time (UTC+9)
    AEST // Australian Eastern Standard Time (UTC+10)
    AEDT // Australian Eastern Daylight Time (UTC+11)
    BST // British Summer Time (UTC+1)
    CEST // Central European Summer Time (UTC+2)
    KST // Korea Standard Time (UTC+9)
    NZST // New Zealand Standard Time (UTC+12)
    NZDT // New Zealand Daylight Time (UTC+13)
    ART // Argentina Time (UTC-3)
    BRT // Brasilia Time (UTC-3)
    NST // Newfoundland Standard Time (UTC-3:30)
    AKST // Alaska Standard Time (UTC-9)
    HST // Hawaii-Aleutian Standard Time (UTC-10)
    WET // Western European Time (UTC+0)
    MSK // Moscow Standard Time (UTC+3)
    SGT // Singapore Time (UTC+8)

    // UTC Offsets (with every half-hour interval)
    UTC_PLUS_0 // UTC +0
    UTC_PLUS_0_5 // UTC +0:30 (e.g., India Standard Time)
    UTC_PLUS_1 // UTC +1
    UTC_PLUS_1_5 // UTC +1:30
    UTC_PLUS_2 // UTC +2
    UTC_PLUS_2_5 // UTC +2:30
    UTC_PLUS_3 // UTC +3
    UTC_PLUS_3_5 // UTC +3:30 (e.g., Iran Standard Time)
    UTC_PLUS_4 // UTC +4
    UTC_PLUS_4_5 // UTC +4:30
    UTC_PLUS_5 // UTC +5
    UTC_PLUS_5_5 // UTC +5:30 (e.g., Indian Standard Time)
    UTC_PLUS_6 // UTC +6
    UTC_PLUS_6_5 // UTC +6:30
    UTC_PLUS_7 // UTC +7
    UTC_PLUS_7_5 // UTC +7:30
    UTC_PLUS_8 // UTC +8
    UTC_PLUS_8_5 // UTC +8:30
    UTC_PLUS_9 // UTC +9 (e.g., Japan Standard Time)
    UTC_PLUS_9_5 // UTC +9:30 (e.g., Australian Central Standard Time)
    UTC_PLUS_10 // UTC +10
    UTC_PLUS_10_5 // UTC +10:30
    UTC_PLUS_11 // UTC +11
    UTC_PLUS_11_5 // UTC +11:30
    UTC_PLUS_12 // UTC +12
    UTC_PLUS_12_5 // UTC +12:30
    UTC_MINUS_1 // UTC -1
    UTC_MINUS_2 // UTC -2
    UTC_MINUS_3 // UTC -3
    UTC_MINUS_3_5 // UTC -3:30
    UTC_MINUS_4 // UTC -4
    UTC_MINUS_5 // UTC -5
    UTC_MINUS_6 // UTC -6
    UTC_MINUS_7 // UTC -7
    UTC_MINUS_8 // UTC -8 (e.g., Pacific Standard Time)
    UTC_MINUS_9 // UTC -9
    UTC_MINUS_10 // UTC -10
    UTC_MINUS_11 // UTC -11
    UTC_MINUS_12 // UTC -12
}

// -------------------------------------------------------------------------
// USER AUTHENTICATION & PROFILE
// -------------------------------------------------------------------------

// Core user model for authentication and relationships
// Contains essential fields for account management
model User {
    // Unique identifiers
    id String @id @default(uuid())

    // -------------------------
    // Authentication Fields
    // -------------------------
    email        String     @unique
    username     String     @unique
    passwordHash String     @map("password_hash")
    status       UserStatus @default(ACTIVE)
    role         UserRole   @default(USER)

    // Email verification
    emailVerified           Boolean   @default(false) @map("email_verified")
    verificationToken       String?   @map("verification_token")
    verificationTokenExpiry DateTime? @map("verification_token_expiry")

    // Password reset
    resetToken       String?   @map("reset_token")
    resetTokenExpiry DateTime? @map("reset_token_expiry")

    // -------------------------
    // Analytics & Metrics
    // -------------------------
    // Counters for quick retrieval without expensive joins
    followerCount  Int @default(0) @map("follower_count") // Number of users following this user
    followingCount Int @default(0) @map("following_count") // Number of users this user follows

    // -------------------------
    // Timestamps
    // -------------------------
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    lastLoginAt DateTime? @map("last_login_at")

    // -------------------------
    // Relationships
    // -------------------------
    // Extended data
    profile  Profile?
    settings UserSettings?
    location UserLocation?
    sessions Session[]

    // Social graph
    followedBy     Follow[]        @relation("following") // Users who follow this user
    following      Follow[]        @relation("follower") // Users this user follows
    followRequests FollowRequest[] @relation("requestReceiver") // Pending follow requests received
    sentRequests   FollowRequest[] @relation("requestSender") // Follow requests sent

    // -------------------------
    // Database optimizations
    // -------------------------
    @@index([email])
    @@index([username])
    @@map("users")
}

// User profile data beyond core authentication
// Contains optional personal and display information
model Profile {
    id     String @id @default(uuid())
    userId String @unique @map("user_id")

    // Personal information
    firstName  String? @map("first_name")
    lastName   String? @map("last_name")
    bio        String? @map("bio")
    avatar     String? @map("avatar")
    phone      String? @map("phone")
    birthDate  Int?    @map("birth_date")
    birthMonth Int?    @map("birth_month")
    birthYear  Int?    @map("birth_year")

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Database optimizations
    @@index([userId])
    @@index([firstName, lastName])
    @@map("profiles")
}

model UserLocation {
    id     String @id @default(uuid())
    userId String @map("user_id")

    // Location Data
    country                    String?   @map("country")
    state                      String?   @map("state")
    city                       String?   @map("city")
    postalCode                 String?   @map("postal_code")
    streetAddress              String?   @map("street_address")
    lat                        Float?    @map("latitude")
    lng                        Float?    @map("longitude")
    timezoneId                 Timezone? @map("timezone_id")
    internationalDialingPrefix String?   @map("international_dialing_prefix")

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Database optimizations
    @@index([userId])
    @@index([lat, lng]) // Geospatial index for location-based queries
    @@index([country])
    @@index([state, city, postalCode])
    @@index([streetAddress])
    @@map("user_locations")
}

// -------------------------------------------------------------------------
// USER PREFERENCES & SETTINGS
// -------------------------------------------------------------------------

// User customization preferences and privacy settings
// Controls visibility and notification behavior
model UserSettings {
    id     String @id @default(uuid())
    userId String @unique @map("user_id")

    // Privacy settings
    isPrivateProfile    Boolean @default(false) @map("is_private_profile")
    showOnlineStatus    Boolean @default(true) @map("show_online_status")
    allowTagging        Boolean @default(true) @map("allow_tagging")
    allowDirectMessages Boolean @default(true) @map("allow_direct_messages")

    // Notification preferences
    emailNotifications Boolean @default(true) @map("email_notifications")
    newFollowerNotify  Boolean @default(true) @map("new_follower_notify")

    // Display preferences
    theme    String @default("light") @map("theme")
    language String @default("en") @map("language")

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Database optimizations
    @@index([userId])
    @@map("user_settings")
}

// -------------------------------------------------------------------------
// SECURITY & SESSIONS
// -------------------------------------------------------------------------

// Active user sessions for multi-device login management
// Enables session tracking and revocation
model Session {
    id     String @id @default(uuid())
    userId String @map("user_id")

    // Authentication
    token     String  @unique // JWT or session token
    ipAddress String? @map("ip_address")
    userAgent String? @map("user_agent")

    // Session lifecycle
    expiresAt    DateTime  @map("expires_at")
    lastActiveAt DateTime  @default(now()) @map("last_active_at")
    revokedAt    DateTime? @map("revoked_at")

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Database optimizations
    @@index([userId])
    @@index([token])
    @@index([expiresAt])
    @@map("sessions")
}

// -------------------------------------------------------------------------
// SOCIAL GRAPH & RELATIONSHIPS
// -------------------------------------------------------------------------

// Follower/following connections between users
// Represents established social graph connections
model Follow {
    id          String   @id @default(uuid())
    followerId  String   @map("follower_id") // User who is following
    followingId String   @map("following_id") // User being followed
    createdAt   DateTime @default(now()) @map("created_at")

    // Relationships
    follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

    // Database optimizations
    @@unique([followerId, followingId]) // Prevents duplicate follows
    @@index([followerId])
    @@index([followingId])
    @@map("follows")
}

// Pending follow requests for private accounts
// Manages the approval workflow for private profiles
model FollowRequest {
    id         String              @id @default(uuid())
    senderId   String              @map("sender_id") // User requesting to follow
    receiverId String              @map("receiver_id") // User with private profile
    status     FollowRequestStatus @default(PENDING)

    // Timestamps
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    respondedAt DateTime? @map("responded_at") // When request was accepted/rejected

    // Relationships
    sender   User @relation("requestSender", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User @relation("requestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

    // Database optimizations
    @@unique([senderId, receiverId]) // Prevents duplicate requests
    @@index([senderId])
    @@index([receiverId])
    @@index([status])
    @@map("follow_requests")
}
